Allowed functions for Minishell
---------------------------------------------------------------------------------------

----> readline:
	Alrleady in use


-----> rl_clear_history:
	clears the prompt history saved by the add_history function, takes no 
	parameter and returns nothing


----> rl_on_new_line
----> rl_replace_line(char *newline, 1 or 0) // 1 if it should be immediately
----> rl_redisplay
			void    ft_signal_ctrl_c(int sig)
			{
				(void)sig;
				write(2, "\n", 1);
				rl_replace_line("", 0);
				rl_on_new_line();
				rl_redisplay();
			}


----> wait
		can take in a pointer to integer as argument. Waits for a child process to
		finish execution.

				wait(&status)

		on success, returns the process ID of the terminated child; 
		on failure, -1 is returned.


----> waitpid
		can wait for a specific child process to finish execution. takes in 3 parameters

				waitpid(pid, &status, flag);

		on success, returns the process ID of the child whose state has changed;
		On failure, -1 is returned.


----> wait3
		used to wait for a child process to complete and to retrieve its status.
		It is similar to the waitpid() function but provides additional information
		about the system resources used by the child process.

				wait3(wstatus, options, rusage)


----> wait4
		equivalent to waitpid

				wait4(pid, wstatus, options, rusage)


----> signal <signal.h>
		In C programming language, the signal() function is used to set 
		up a signal handler for a specific signal. Signals are software interrupts 
		that are sent to a program by the operating system or another program.

				void (*signal(int sig, void (*func)(int)))(int)
		
		returns the previous value of the signal handler On
        failure, it returns SIG_ERR, and errno is set to indicate the
        error.


----> sigaddset
		the sigaddset() function is used to add a signal to a signal set.
		Signals are software interrupts that are sent to a program by the 
		operating system or another program. Signal sets are collections of
		signals that can be manipulated using a set of functions in the signal.h library

				int sigaddset(sigset_t *set, int signum)


----> sigemptyset
		the sigemptyset() function is used to initialize a signal set to be
		empty, i.e., containing no signals

				int sigemptyset(sigset_t *set)


----> kill
		the kill() function is used to send a signal to a process or a group of 
		processes. Signals are software interrupts that are sent to a program by 
		the operating system or another program. The kill() function is defined 
		in the signal.h library.

				int kill(pid_t pid, int sig)


----> getcwd
		the getcwd() function is used to get the current working directory (cwd) of 
		the process. The getcwd() function is defined in the unistd.h library.

				char *getcwd(char *buf, size_t size)


----> chdir
		the chdir() function is used to change the current working directory of 
		the process. The chdir() function is defined in the unistd.h library.

				int chdir(const char *path)


----> stat   <sys/stat.h>
		The stat() function in C is used to retrieve file or directory status information.
		The function takes a filename or path as its argument and returns a structure of
		type struct stat, which contains information such as the file's size, owner,
		permissions, and modification time.

				int stat(const char *path, struct stat *buf)

		The first argument path is the filename or path of the file or directory you 
		want to retrieve status information for. The second argument buf is a pointer 
		to a struct stat that will be filled with information about the file or directory.


---->  lstat
		The lstat() function in C is similar to the stat() function, but it's used to 
		retrieve status information about a symbolic link file, rather than the file that 
		the symbolic link points to. The lstat() function takes the same arguments and 
		returns the same information as stat(), with the exception that it returns information 
		about the symbolic link file itself, rather than the file that it points to.

				int lstat(const char *path, struct stat *buf)


----> fstat
		The fstat() function in C is used to retrieve status information about a file that
		is already open. It is similar to the stat() function, but instead of taking a 
		filename as an argument, it takes a file descriptor that was obtained from a previous 
		call to open().

				int fstat(int fd, struct stat *buf)


----> unlink
		The unlink() function in C is used to delete a file or symbolic link. It takes a 
		single argument, which is the name of the file or symbolic link to delete.

				int unlink(const char *path)


----> dup
		The dup() function in C is used to create a copy of an existing file descriptor. 
		It returns a new file descriptor that is a duplicate of the specified file descriptor, 
		sharing the same open file description with the original file descriptor. This 
		allows multiple file descriptors to refer to the same file or other I/O resource.

				int dup(int oldfd)


----> dup2
		The dup2() function in C is similar to the dup() function, but it allows you to 
		specify a desired file descriptor for the duplicated file descriptor. This can 
		be useful for redirecting input or output to a specific file or pipe, or for 
		closing a file descriptor without losing its associated open file description.

				int dup2(int oldfd, int newfd)


-----> opendir   <dirent.h>
		The opendir() function in C is used to open a directory stream for the specified 
		directory path. This function is part of the standard C library and is typically 
		used in combination with other functions such as readdir() to traverse the 
		contents of a directory.

				DIR *opendir(const char *path)

		The path argument is a pointer to a string containing the directory path to be 
		opened. The return value is a pointer to a DIR structure that represents the 
		directory stream if the directory was successfully opened, or NULL if an error 
		occurred.
		Once a directory stream is opened with opendir(), you can use the readdir() 
		function to read the contents of the directory. The readdir() function returns 
		a pointer to a struct dirent structure that contains information about the 
		next directory entry.

						int main() 
						{
							DIR *dir;
							struct dirent *entry;

							dir = opendir(".");
							if (dir == NULL) {
								printf("Error opening directory\n");
								return -1;
							}

							while ((entry = readdir(dir)) != NULL) {
								printf("%s\n", entry->d_name);
							}

							closedir(dir);
							return 0;
						}


----> readdir
		The readdir() function in C is used to read the contents of a directory that has
		been opened with the opendir() function. It returns a pointer to a struct dirent 
		structure that contains information about the next directory entry.

				struct dirent *readdir(DIR *dirp)

		The dirp argument is a pointer to a DIR structure that represents the directory 
		stream. The return value is a pointer to a struct dirent structure if a directory 
		entry was successfully read, or NULL if the end of the directory stream was 
		reached or an error occurred.
		The struct dirent structure contains several fields that provide information about 
		a directory entry, including the name of the entry and its type. Here is the 
		definition of the struct dirent structure:
				struct dirent
				{
					ino_t          d_ino;       /* inode number */
					off_t          d_off;       /* offset to the next dirent */
					unsigned short d_reclen;    /* length of this record */
					unsigned char  d_type;      /* type of file; not supported by all file system types */
					char           d_name[256]; /* filename */
				};


----> strerror   <string.h>
		In C programming language, the strerror() function is used to obtain a textual
		representation of the error code that occurred during the execution of a 
		function. The function takes an integer error code as an argument and returns 
		a pointer to a character string that describes the error.

				char *strerror(int errnum)

		Here, errnum is an integer error code that represents a specific error that 
		occurred. The function returns a pointer to a null-terminated string that 
		describes the error code.
				int main()
				{
					int fd;
					fd = open("nonexistent_file.txt", O_RDONLY);
					if (fd == -1) {
						printf("Error opening file: %s\n", strerror(errno));
						return 1;
					}
					// ...
					return 0;
				}

----> perror
		In C programming language, the perror() function is used to print an error message
		to the console that describes the most recently occurring error during program 
		execution. This function is particularly useful when dealing with system calls or 
		library functions that return an error code upon failure.

				void perror(const char *str)

		Here, str is a string that is used as a prefix to the error message. The function 
		prints the string followed by a colon, a space, and the error message that 
		corresponds to the current value of the global variable errno.

----> isatty
		In C programming language, the isatty() function is used to determine whether 
		a given file descriptor refers to a terminal or not. The function returns a 
		non-zero value if the file descriptor is associated with a terminal, and zero 
		otherwise.

				int isatty(int fd)

						int main() {
						if (isatty(STDOUT_FILENO)) {
							printf("Standard output is a terminal.\n");
						} else {
							printf("Standard output is not a terminal.\n");
						}
						return 0;
					}

----> ttyname
		In C programming language, the ttyname() function is used to obtain the name of 
		the terminal associated with a given file descriptor. The function returns a 
		pointer to a null-terminated string that represents the name of the terminal.

				char *ttyname(int fd)

					int main() {
					char *name = ttyname(STDIN_FILENO);
					if (name == NULL) {
						printf("Standard input is not a terminal.\n");
					} else {
						printf("Terminal name: %s\n", name);
					}
					return 0;
				}

----> ttyslot
		In C programming language, the ttyslot() function is used to obtain the slot 
		number of the current user's terminal in the /etc/ttydefs file. The function 
		returns an integer value that represents the slot number of the terminal

				int ttyslot()


---->  ioctl   <sys/ioctl.h>
		In C programming language, the ioctl() function is used to manipulate the 
		behavior of devices, terminals, and other I/O streams. The function can be 
		used to set or retrieve device-specific parameters, such as baud rate, line 
		discipline, and terminal window size.

				int ioctl(int fd, unsigned long request, ...)

		Here, fd is an integer file descriptor that represents an open file or stream, 
		and request is an unsigned long value that specifies the device-specific 
		operation to be performed. The remaining arguments depend on the specific request 
		value and the device being manipulated.
				int main() {
					struct winsize ws;
					int fd = STDOUT_FILENO;
					if (ioctl(fd, TIOCGWINSZ, &ws) == -1) {
						perror("ioctl");
						exit(1);
					}
					printf("Terminal window size: %d rows x %d columns\n", ws.ws_row, ws.ws_col);
					return 0;
				}
		In this example, the ioctl() function is called with the TIOCGWINSZ request
		code to obtain the current window size of the terminal associated with the 
		standard output stream. The ioctl() function stores the window size information
		in the winsize structure pointed to by the third argument. If the function 
		returns a value of -1, indicating an error, the program prints an error message
		using the perror() function and exits with a status code of 1. Otherwise, it 
		prints the window size information to the console.


----> getenv
		n C programming language, the getenv() function is used to retrieve the value of 
		an environment variable. Environment variables are a set of named values that can 
		be accessed by a running program, and are typically used to configure the behavior 
		of the program or provide information about the system environment.

				char *getenv(const char *name)

		Here, name is a string that represents the name of the environment variable to 
		retrieve. The function returns a pointer to a string that contains the value of 
		the variable, or NULL if the variable does not exist.
					int main() {
					char *user = getenv("USER");
					if (user == NULL) {
						printf("USER environment variable not found.\n");
					} else {
						printf("Hello, %s!\n", user);
					}
					return 0;
				}


----> tcsetattr  <termios.h>
		The tcsetattr() function is a system call in the C programming language that is used to 
		set the terminal attributes for a specified file descriptor. This function is commonly 
		used in Unix-based operating systems to control the behavior of the terminal device.

				int tcsetattr(int fd, int optional_actions, const struct termios *termios_p)

		fd: The file descriptor for the terminal device, which is typically 0 for standard input, 
		1 for standard output, and 2 for standard error.
		optional_actions: An integer that specifies what actions should be taken with the terminal 
		attributes. This can be one of three values:
			TCSANOW: Set the attributes immediately.
			TCSADRAIN: Set the attributes after all output has been transmitted.
			TCSAFLUSH: Set the attributes after all output has been transmitted and all input has 
			been discarded.
		termios_p: A pointer to a struct termios object that contains the desired terminal attributes.
		The struct termios object contains a number of fields that can be used to configure the 
		terminal, including baud rate, data bits, parity, and stop bits. Once the desired attributes 
		have been set in the struct termios object, the tcsetattr() function can be used to apply 
		them to the terminal device.
		If the tcsetattr() function is successful, it will return 0. Otherwise, it will return -1
		and set errno to indicate the error that occurred.

		One common use case for tcsetattr() is to configure the terminal in "raw mode" for a program 
		that needs to read input from the terminal without any line editing or input processing by 
		the terminal driver.
		In raw mode, input is made available to the program character-by-character, without any 
		buffering or processing by the terminal driver. This is useful for applications such as 
		text editors, command-line shells, and games that need to respond to user input in real-time.

		To enable raw mode, the c_lflag field of the struct termios object can be set to a combination 
		of flags that disable input processing, echo, and other terminal features. For example, the 
		following code sets the terminal to raw mode:

					void set_raw_mode(int fd) {
						struct termios termios_p;

						tcgetattr(fd, &termios_p); // get current attributes
						cfmakeraw(&termios_p);     // set raw mode attributes
						tcsetattr(fd, TCSANOW, &termios_p); // apply attributes
					}

		In this example, the cfmakeraw() function is used to set the terminal attributes to raw mode, 
		and the tcsetattr() function is used to apply the changes immediately.
		Once the terminal has been set to raw mode, the program can read input from the terminal 
		character-by-character using the read() function, and respond to user input in real-time without 
		any interference from the terminal driver.


----> tcgetattr
		The tcgetattr() function in C is used to get the current terminal attributes for a specified file 
		descriptor. This function is commonly used in Unix-based operating systems to query the terminal 
		device and retrieve information about its current settings.

					int tcgetattr(int fd, struct termios *termios_p)

		fd: The file descriptor for the terminal device, which is typically 0 for standard input, 1 for 
		standard output, and 2 for standard error.
		termios_p: A pointer to a struct termios object where the current terminal attributes will be stored.
		The struct termios object contains a number of fields that represent the various terminal attributes, 
		such as baud rate, data bits, parity, and stop bits. When tcgetattr() is called, it populates the 
		termios_p structure with the current values of these attributes for the specified terminal device.

		If the tcgetattr() function is successful, it will return 0. Otherwise, it will return -1 and set 
		errno to indicate the error that occurred.
		A common use case for tcgetattr() is to retrieve the current terminal attributes so that they can 
		be modified and then restored later. For example, if a program needs to temporarily set the terminal 
		to raw mode (as discussed in the previous question), it can use tcgetattr() to save the current 
		attributes before making any changes, and then use tcsetattr() to restore the original attributes 
		after it has finished. Here is an example:

					void set_raw_mode(int fd) {
						struct termios saved_attributes;
						struct termios termios_p;

						tcgetattr(fd, &saved_attributes); // save current attributes
						tcgetattr(fd, &termios_p);        // get current attributes
						cfmakeraw(&termios_p);            // set raw mode attributes
						tcsetattr(fd, TCSANOW, &termios_p); // apply attributes

						// ... do work in raw mode ...

						tcsetattr(fd, TCSANOW, &saved_attributes); // restore original attributes
					}
		In this example, the current terminal attributes are first saved using tcgetattr() and stored in the 
		saved_attributes structure. Then, the current attributes are retrieved and modified to enable raw mode 
		using cfmakeraw(). The modified attributes are applied to the terminal device using tcsetattr(). After 
		performing the necessary work in raw mode, the original attributes are restored using tcsetattr() and 
		the saved attributes.


----> tgetent  <term.h>
		In C programming language, tgetent is a function used for accessing the capabilities of the terminal 
		database. The function takes two arguments: a character array bp that points to a buffer containing 
		the terminal type name, and a character pointer name that points to the name of the terminal type.

		The tgetent function reads the terminal type database and initializes the buffer pointed to by 
		bp with the appropriate terminal capabilities for the specified terminal type. The database used 
		by tgetent is usually located in the /usr/share/terminfo directory.

						int main() {
							char buf[1024];
							char *termtype = getenv("TERM");

							if (tgetent(buf, termtype) < 0) {
								perror("tgetent");
								exit(1);
							}

							// Use terminal capabilities here

							return 0;
						}
		In this example, getenv is used to get the value of the TERM environment variable, which contains 
		the name of the current terminal type. The tgetent function is then called with this name and a 
		buffer to store the terminal capabilities. If tgetent fails, an error message is printed and the 
		program exits. Otherwise, the terminal capabilities can be used in the rest of the program.


----> tgetflag
		In C programming language, tgetflag is a function used for accessing the terminal database to 
		retrieve boolean capabilities. The function takes a single argument, a character pointer cap 
		that points to the name of the capability to retrieve.

		The tgetflag function returns 1 if the boolean capability is present and 0 otherwise. It reads 
		the terminal type database, looks up the capability named capname, and returns the value of the 
		boolean capability associated with that name.

						int main() {
							char *cap = "am"; // Auto-margin capability
							int flag;

							flag = tgetflag(cap);

							if (flag == 1) {
								// Auto-margin is enabled
							} else if (flag == 0) {
								// Auto-margin is disabled
							} else {
								// Error: capability value is not boolean
							}

							return 0;
						}
		In this example, tgetflag is used to query the boolean capability for auto-margin (am). 
		The function returns 1 if auto-margin is enabled, or 0 if it is disabled. If the capability 
		value is not boolean, the behavior is undefined.

		Tgetflag is often used in conjunction with other terminal database functions, such as tgetnum 
		(for retrieving numeric capabilities) and tgetstr (for retrieving string capabilities), to 
		determine the capabilities of the terminal and adjust the behavior of a program accordingly. 
		For example, if the terminal does not support auto-margin, a program could adjust its output 
		to avoid assuming that auto-margin is present.


----> tgetnum
		In C programming language, tgetnum is a function used for accessing the terminal database to 
		retrieve numeric capabilities. The function takes a single argument, a character pointer cap 
		that points to the name of the capability to be queried.

		The tgetnum function returns the numeric value of the specified capability, or -1 if the 
		capability is not present or its value is not numeric. The behavior of tgetnum is undefined 
		if the capability value is not numeric and cannot be converted to a number.
		
						int main() {
							char *cap = "cols"; // Number of columns capability
							int num;

							num = tgetnum(cap);

							if (num >= 0) {
								// Number of columns is num
							} else {
								// Error: capability value is not numeric
							}

							return 0;
						}
		In this example, tgetnum is used to retrieve the number of columns supported by the terminal 
		(cols capability). The function returns the numeric value of the capability, or -1 if the 
		capability is not present or its value is not numeric.
		

----> tgetstr 
		In C programming language, tgetstr is a function used for accessing the terminal database to 
		retrieve string capabilities. The function takes a single argument, a character pointer cap 
		that points to the name of the capability to be queried.

		The tgetstr function returns a pointer to a string that represents the value of the specified 
		capability, or NULL if the capability is not present. The behavior of tgetstr is undefined if 
		the capability value cannot be retrieved as a string.

						int main() {
							char *cap = "smcup"; // Enter alternate screen capability
							char *str;

							str = tgetstr(cap, NULL);

							if (str != NULL) {
								// Enter alternate screen: str
							} else {
								// Error: capability is not present
							}

							return 0;
						}
		In this example, tgetstr is used to retrieve the capability for entering the alternate screen 
		(smcup). The function returns a pointer to the string that represents the capability, or NULL 
		if the capability is not present.


----> tgoto 
		In C programming language, tgoto is a function used for formatting a string that represents a 
		terminal capability that takes two parameters: row and column. The function takes three 
		arguments: a character pointer cap that points to the name of the capability to be formatted, 
		an integer col that represents the column to move the cursor to, and an integer row that 
		represents the row to move the cursor to.

		The tgoto function returns a pointer to the formatted string. The behavior of tgoto is undefined 
		if the capability value cannot be retrieved as a string or if the string cannot be formatted with 
		the given parameters.

						int main() {
							char *cap = "cm"; // Move cursor capability
							int col = 10;
							int row = 5;
							char *str;

							str = tgoto(cap, col, row);

							if (str != NULL) {
								printf("Move cursor: %s\n", str);
							} else {
								// Error: capability is not present or cannot be formatted
							}

							return 0;
						}
		In this example, tgoto is used to format the capability for moving the cursor (cm) to the 
		specified row and column. The function returns a pointer to the formatted string, which is 
		then printed to the console.


---->tputs
		In C programming language, tputs is a function used to output a terminal capability string 
		to the terminal. The function takes a single argument, a character pointer str that points 
		to the string representing the terminal capability.

		The tputs function returns an integer value representing the number of characters output 
		to the terminal, or -1 if an error occurs.

						int main() {
							char *cap = "clear"; // Clear screen capability

							tputs(cap, 1, putchar);

							return 0;
						}
		In this example, tputs is used to output the capability for clearing the screen (clear) to the 
		terminal. The function is called with the capability string, a count of 1 to indicate that only 
		one string will be output, and the putchar function as the output function to use.


















