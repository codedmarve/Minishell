
<infile cat >outfile
--------
< infile cat                   echo >outfile ">>>||||||||||"
cat: echo: No such file or directory
cat: ls: No such file or directory
-------
<infile cat >outfile | >outfile2
outfile2 is empty
-------
<infile cat >outfile >outfile2
skips >outfile, output is on outfile2
-------
<infile cat >outfile >outfile2 >outfile3
output is on outfile3, outfiles are created
-------
<infile <infile2 <infile3 cat >outfile >outfile2 >outfile3
smth will be in otfile3 if infile3 isn't empty
<infile <infile2 <infile3 cat >outfile >outfile2 >outfile3
bash: infile: No such file or directory
-------
bash-5.2$ <text cat >file (works)
bash-5.2$ <text cat << EOF > file (file remains empty)
> EOF
-------
bash-5.2$ <text cat << EOF > file
> hello
> qqq
> EOF (creates file, puts "hello qqq" there)
-------
ls << lol > file
> file
> a.out
> lol (creates file first, then writes there result of cmd execution)
-------
cat << word
> word (waits for us to enter "word")
<< is known as here-document structure. 
You let the program know what will be the ending text, 
and whenever that delimiter is seen, the program will read all the stuff 
you've given to the program as input and perform a task upon it.

<< cat
> cat | cat | ls (still waiting for input)
> cat
-------
cat << EOF > file.txt
EOF (creates the file after entering EOF)
-------
-------
2d array we need to evaluate - input

global struct t_data
{
	*raw_input
	t_envp *envp_ll;
	char **input_slitted;- 2d array (holds a 2d char array, all the commands, 
	arguments,pipes...separated, empty spaces????)

	** paths: 2d char array that holds all the paths to the bin folders
 	* that are saved in the env variable PATH - may be stored inside of the PATH node

	amount_of_pipe_groups (pipes+1)
	*pipe_groups
}


struct pipe_group contains:
info abt command,
arguments,
any input/output redirection or piping
first *word will be command itself

handles built-in commands 
and executable commands
with their respective 
paths.

struct pipe_group
{
exit status (here?)
**words
*path
builtin (if builin == ECHO->run ft_echo)

redirection_in
char *arr_inputfile

redirection_out
char *arr_outputfile

pipe_in
pipe_out
pipe_fd[2]

pid from executor

*t_data
}

sdfjhlshdlkah | sdfgökölkfgjölksdfjg > dsgiu 
